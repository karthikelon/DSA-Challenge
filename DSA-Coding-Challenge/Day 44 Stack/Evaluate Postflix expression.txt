Evaluate Postfix Expression
Stack
AmazonTCS (Tata Consultancy Services)SlackWalmart Global Tech
Problem Statement
An arithmetic expression is given by a string array A of size N. Evaluate the value of an arithmetic expression in Reverse Polish Notation or Postfix Expression.

Valid operators are +, -, *, /. Each string may be an integer or an operator.

Example 1:
Input:

["2", "1", "+", "3", "*"]

Output:

9

import java.util.*;
public class Solution
{
    public int evalPostfix(String[] A)
    {
      //create a stack
      //iterate through the array
      //convert to int ,if operand then push
      //if operator  then pop last 2 element
      //perform the operation on poped element and push it 
      
      Stack s1=new Stack();
      for(int i=0;i<A.length;i++){
        String curr=A[i];
        String currentstr=A[i];
         System.out.println("item to be pushed in char "+currentstr);
        if(!isOperator(currentstr)){
            int temp=Integer.parseInt(currentstr); 
            System.out.println("item to be pushed"+temp);
            s1.push(temp);
            System.out.println("pushing"+temp);
        }
        if(isOperator(currentstr)){
          char operator=currentstr.charAt(0);
          int secondoperad=(int)s1.pop();
          int firstoperand=(int)s1.pop();
          int result=resultofoperation(firstoperand,secondoperad,operator);
          s1.push(result);
          System.out.println("after operation the result is "+result);
        }
      }
      int lastvalueinstack=(int)s1.pop();
      return lastvalueinstack;
      
    }
    
    
    public static boolean isOperator(String input) {
        return input.equals("+") || input.equals("-") || input.equals("*") ||
               input.equals("/") || input.equals("^");
    }
    public static int resultofoperation(int firstoperand,int secondoperad,char operand){
      
      switch(operand){

        case '+':
          return firstoperand+secondoperad;
        case '-':
          return firstoperand-secondoperad;
        case '*':
          return firstoperand*secondoperad;
        case '/':
          return firstoperand/secondoperad;
        
      }
      return 0;
    }
}