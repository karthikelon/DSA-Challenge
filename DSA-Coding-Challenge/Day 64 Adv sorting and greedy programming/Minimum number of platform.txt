Minimum Number of Platforms
Greedy
Array
AppleDocuSignIntuitPaypal
Problem Statement
Given arrival and departure times of all trains that reach a railway station. Find the minimum number of platforms required for the railway station so that no train is kept waiting.
Consider that all the trains arrive on the same day and leave on the same day. Arrival and departure time can never be the same for a train but we can have arrival time of one train equal to departure time of the other. At any given instance of time, same platform can not be used for both departure of a train and arrival of another train. In such cases, we need different platforms.

Example 1:
Input:

n = 6 
arr[] = {0900, 0940, 0950, 1100, 1500, 1800}
dep[] = {0910, 1200, 1120, 1130, 1900, 2000}

Output:

3

Explanation:

Minimum 3 platforms are required to safely arrive and depart all trains.

Example 2:
Input:

n = 3
arr[] = {0900, 1100, 1235}
dep[] = {1000, 1200, 1240}

Output: 1

Explanation:

Only 1 platform is required to safely manage the arrival and departure of all trains. 

Constraints:
1 ≤ n ≤ 50000
0000 ≤ A[i] ≤ D[i] ≤ 2359

solution -
import java.util.*;
public class Solution {

    public int findPlatform(int[] arr, int[] dep, int n) {
      

      //we will independently sort arrival and depature  since the agenda is to check
      //if at a point of time how many trains are using the plateform at same time.
      //if arr <= dep new train extra has come so add platform 
      //if dep < arr train has left before new train so reduce the number of platform

      Arrays.sort(arr);
      Arrays.sort(dep);

      int i=0,j=0;
      int noofplateform=0;
      int maxplateform=1;
      while(i<n){

        if(arr[i]<=dep[j]){
          noofplateform++;
          i++;
        }else{
          noofplateform--;
          j++;
        }
        maxplateform=Math.max(maxplateform,noofplateform);
      }
      return maxplateform;
    }
}
