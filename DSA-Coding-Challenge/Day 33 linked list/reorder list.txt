Reorder List
Linked List
AtlassianDE ShawGoogle
Problem Statement
You are given the head of a singly linked-list. The list can be represented as:

 

L0 → L1 → … → Ln - 1 → Ln. Reorder the list to be in the following form: L0

 

→  Ln → L1 → Ln - 1 → L2 → Ln - 2 → … You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Example 1:
Input:

l1 = [0, 5, 1, -9, 7, 3, -1, -3]

Output:

[0, -3, 5, -1, 1, 3, -9, 7]

Example 2:
Input:

l1 = [-5, -5, 8, 7, 5, -7, -3, 10, 6, 6]

Output:

[-5, 6, -5, 6, 8, 10, 7, -3, 5, -7]

Constraints:
-1000 <= node value <= 1000

Each list has atmost 50000 nodes.




  class ListNode {
    int val;
    ListNode next;
    ListNode() { val = 0; next = null; }
    ListNode(int val) { this.val = val; next = null; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
  } 
  public class Solution {
    public void reorderList(ListNode head) {
      if(head==null||head.next==null){
        return;
      }
    //pointer to access the given parent linkedlist
    ListNode dummy=head;
    ListNode dummy2=head;
    //using fast and slow pointer to get to middle node

    ListNode fpointer=head;
    ListNode spointer=head;
    boolean status=true;
    /*
    while(fpointer!=null&&fpointer.next!=null){
      fpointer=fpointer.next.next;
      spointer=spointer.next;
      
    }*/
    //counting the number of nodes
    int count=0;
    while(dummy2!=null){
      dummy2=dummy2.next;
      count++;
      
    }
    //creating duplicate list 
    ListNode firsthalf=duplicateList(head);
    ListNode secondhalf=duplicateList(head);

    ListNode reverseSecondHalf=reversell(secondhalf);
  
    printll(firsthalf);
    System.out.println();
    printll(reverseSecondHalf);
    while(count>0){
      if(status){
          dummy.val=firsthalf.val;
          firsthalf=firsthalf.next;
        }
      else{
          dummy.val=reverseSecondHalf.val;
          reverseSecondHalf=reverseSecondHalf.next;
        }
        dummy=dummy.next;
        status=!status;
        count--;
    }
    /*
    while(firsthalf!=null){
      dummy.val=firsthalf.val;
      dummy=dummy.next;
      firsthalf=firsthalf.next;
    }*/
    }
    public static ListNode reversell(ListNode head){
      if(head==null||head.next==null){
        return head;
      }
      ListNode headSubP=reversell(head.next);
      head.next.next=head;
      head.next=null;
      return headSubP;
    }
    public static ListNode duplicateList(ListNode head){
      ListNode newlist=new ListNode();
      ListNode temp=head;
      ListNode output=temp;
      while(temp!=null){
        newlist.val=temp.val;
        newlist.next=new ListNode();
        newlist=newlist.next;
        temp=temp.next;
      }
      return output;
    }
    public static void printll(ListNode head){
      ListNode pointer =head;
      while(pointer!=null){
        System.out.print(pointer.val+"-->");
        pointer=pointer.next;
      }
    }
    
  }