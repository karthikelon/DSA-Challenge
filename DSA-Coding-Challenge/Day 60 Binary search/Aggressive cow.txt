Problem Statement
You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible.
The first line of input contains two space-separated integers n and k.
The second line contains n space-separated integers denoting the position of the stalls.

Example 1:
Input:
n=5 
k=3
stalls = [1 2 4 8 9]
Output:
3
Explanation:
The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, 
which also is the largest among all possible ways.

Example 2:
Input:
n=5 
k=3
stalls = [10 1 2 7 5]
Output:
4
Explanation:
The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4,
which also is the largest among all possible ways.

Constraints:
2 <= n <= 105
2 <= k <= n
0 <= stalls[i] <= 109


import java.util.*;

class Solution {
    public static int solve(int n, int k, int[] stalls) {
       //You can code here
      //logic is simple sort it locate the values of the number based on index 
      //using binary sort find a optimal value of min distance  using it  
      //check if the count of no of pair where distance is equal to k and count >k 
      //if target is found just to check if any other better solution is possible change the mid value and proceed

      
      Arrays.sort(stalls);
      
      for(int x:stalls){
        System.out.print(x+" ");
      }
      int ans=-1;
      int left=0,right=stalls[stalls.length-1];
      while(left<=right){
        int mid=left+((right-left)/2);
        System.out.println("current mid value is "+mid);
        if(isvalid(stalls,k,mid)){
            ans=mid;
            left=mid+1;
        }else{
          right=mid-1;
        }
      }
      return ans;

    }
    public static boolean isvalid(int []stalls,int k,int mindistance){
      int count=1;
      int lastpostion=0;
      for(int i=0;i<stalls.length;i++){
          if(stalls[i]-stalls[lastpostion]>=mindistance){
            count++;
            lastpostion=i;
          }
      }
      return count>=k;
    }   
}